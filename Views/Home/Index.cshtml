<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rain Detection System Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .status-card {
            transition: all 0.3s ease;
            border: none;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .status-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }
        
        .device-online {
            border-left: 4px solid #28a745;
        }
        
        .device-offline {
            border-left: 4px solid #dc3545;
        }
        
        .rain-detected {
            border-left: 4px solid #007bff;
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        }
        
        .system-dry {
            border-left: 4px solid #ffc107;
            background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%);
        }
        
        .control-panel {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .servo-slider {
            width: 100%;
            margin: 20px 0;
        }
        
        .log-item {
            padding: 10px;
            margin: 5px 0;
            border-radius: 8px;
            border-left: 4px solid #dee2e6;
        }
        
        .log-rain-start {
            border-left-color: #007bff;
            background-color: #e3f2fd;
        }
        
        .log-rain-stop {
            border-left-color: #ffc107;
            background-color: #fff8e1;
        }
        
        .log-manual {
            border-left-color: #28a745;
            background-color: #e8f5e8;
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        
        .status-online {
            background-color: #28a745;
            animation: pulse 2s infinite;
        }
        
        .status-offline {
            background-color: #dc3545;
        }
        
        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .activity-log-container {
            max-height: 400px;
            overflow-y: auto;
            padding-right: 10px;
            margin-right: -10px;
        }

        .activity-log-container::-webkit-scrollbar {
            width: 8px;
        }

        .activity-log-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        .activity-log-container::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
            transition: background 0.3s ease;
        }

        .activity-log-container::-webkit-scrollbar-thumb:hover {
            background: #a1a1a1;
        }

        .activity-log-wrapper {
            position: relative;
        }

        .activity-log-wrapper::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 20px;
            background: linear-gradient(transparent, white);
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .activity-log-wrapper.has-scroll::after {
            opacity: 1;
        }

        /* Mobile-specific styles */
        @@media (max-width: 768px) {
            .container {
                padding-left: 10px;
                padding-right: 10px;
            }
            
            .control-panel {
                padding: 15px;
                margin-bottom: 15px;
            }
            
            .status-card .card-body {
                padding: 15px;
            }
            
            .status-card h4 {
                font-size: 1.1rem;
            }
            
            .status-card h6 {
                font-size: 0.85rem;
            }
            
            .status-card .fa-2x {
                font-size: 1.5em !important;
            }
            
            .navbar-brand {
                font-size: 1.1rem;
            }
            
            .btn {
                padding: 8px 16px;
                font-size: 0.9rem;
            }
            
            .form-control, .form-range {
                font-size: 0.9rem;
            }
            
            .log-item {
                padding: 8px;
                font-size: 0.85rem;
            }
            
            .log-item strong {
                font-size: 0.8rem;
            }
            
            .log-item .text-muted {
                font-size: 0.75rem;
            }
            
            .activity-log-container {
                max-height: 300px;
                padding-right: 5px;
                margin-right: -5px;
            }
            
            .servo-slider {
                margin: 15px 0;
            }
            
            h5 {
                font-size: 1.1rem;
            }
            
            .form-label {
                font-size: 0.9rem;
                margin-bottom: 0.3rem;
            }
            
            .row.mb-4 {
                margin-bottom: 1.5rem !important;
            }
        }

        @@media (max-width: 576px) {
            .container {
                padding-left: 8px;
                padding-right: 8px;
            }
            
            .control-panel {
                padding: 12px;
            }
            
            .status-card .card-body {
                padding: 12px;
            }
            
            .status-card h4 {
                font-size: 1rem;
            }
            
            .status-card h6 {
                font-size: 0.8rem;
            }
            
            .btn {
                padding: 6px 12px;
                font-size: 0.85rem;
            }
            
            .log-item {
                padding: 6px;
                margin: 3px 0;
            }
            
            .log-item .d-flex {
                flex-direction: column;
                align-items: flex-start !important;
            }
            
            .log-item small {
                margin-top: 5px;
                font-size: 0.7rem;
            }
            
            .activity-log-container {
                max-height: 250px;
            }
            
            .navbar {
                padding: 0.5rem 0;
            }
            
            .navbar-brand {
                font-size: 1rem;
            }
            
            #connectionStatus {
                padding: 0.25rem 0.5rem;
                font-size: 0.8rem;
            }
            
            .form-control {
                padding: 0.375rem 0.5rem;
            }
            
            .col-6 {
                padding-left: 5px;
                padding-right: 5px;
            }
        }

        
        @@media (max-width: 768px) {
            .btn {
                min-height: 44px;
                touch-action: manipulation;
            }
            
            .form-range {
                height: 44px;
                touch-action: manipulation;
            }
            
            .form-control {
                min-height: 44px;
                touch-action: manipulation;
            }
            
            .status-card {
                touch-action: manipulation;
            }
        }

       
        @@media (max-width: 768px) {
            .mt-4 {
                margin-top: 1rem !important;
            }
            
            .mb-3 {
                margin-bottom: 1rem !important;
            }
            
            .gap-2 {
                gap: 0.75rem !important;
            }
            
            .me-2 {
                margin-right: 0.25rem !important;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class="fas fa-cloud-rain me-2"></i>Rain Detection System
            </a>
            <div class="navbar-nav ms-auto">
                <span class="nav-link" id="connectionStatus">
                    <span class="status-indicator status-offline" id="statusIndicator"></span>
                    <span id="statusText">Connecting...</span>
                </span>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- System Status Cards -->
        <div class="row mb-4 g-3">
            <div class="col-sm-6 col-lg-3">
                <div class="card status-card" id="deviceCard">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Device Status</h6>
                                <h4 class="mb-0" id="deviceStatus">
                                    <i class="fas fa-microchip me-1"></i>
                                    <span>Checking...</span>
                                </h4>
                            </div>
                            <div class="text-muted">
                                <i class="fas fa-wifi fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-sm-6 col-lg-3">
                <div class="card status-card" id="rainCard">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Rain Status</h6>
                                <h4 class="mb-0" id="rainStatus">
                                    <i class="fas fa-sun me-1"></i>
                                    <span>Checking...</span>
                                </h4>
                            </div>
                            <div class="text-muted">
                                <i class="fas fa-cloud-rain fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-sm-6 col-lg-3">
                <div class="card status-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Servo Position</h6>
                                <h4 class="mb-0" id="servoPosition">
                                    <span>0°</span>
                                </h4>
                            </div>
                            <div class="text-muted">
                                <i class="fas fa-cog fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-sm-6 col-lg-3">
                <div class="card status-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Sensor Reading</h6>
                                <h4 class="mb-0" id="sensorReading">
                                    <span>0/1024</span>
                                </h4>
                            </div>
                            <div class="text-muted">
                                <i class="fas fa-thermometer-half fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Control Panel -->
        <div class="row mb-4 g-3">
            <div class="col-lg-6">
                <div class="control-panel">
                    <h5 class="mb-3">
                        <i class="fas fa-gamepad me-2"></i>Manual Controls
                    </h5>
                    
                    <div class="mb-3">
                        <label for="servoSlider" class="form-label">Servo Position: <span id="sliderValue">0</span>°</label>
                        <input type="range" class="form-range servo-slider" min="0" max="180" value="0" id="servoSlider">
                        <button class="btn btn-primary w-100" onclick="moveServo()">
                            <i class="fas fa-paper-plane me-1"></i>Move Servo
                        </button>
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button class="btn btn-warning" onclick="toggleSystem()">
                            <i class="fas fa-power-off me-1"></i>
                            <span id="toggleText">Toggle System</span>
                        </button>
                        <button class="btn btn-success" onclick="refreshData()">
                            <i class="fas fa-sync-alt me-1"></i>Refresh Data
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-6">
                <div class="control-panel">
                    <h5 class="mb-3">
                        <i class="fas fa-cogs me-2"></i>System Settings
                    </h5>
                    
                    <div class="mb-3">
                        <label for="thresholdInput" class="form-label">Rain Threshold</label>
                        <input type="number" class="form-control" id="thresholdInput" min="0" max="1024" value="500">
                    </div>
                    
                    <div class="row g-2">
                        <div class="col-6">
                            <label for="normalPosInput" class="form-label">Normal Position</label>
                            <input type="number" class="form-control" id="normalPosInput" min="0" max="180" value="0">
                        </div>
                        <div class="col-6">
                            <label for="rainPosInput" class="form-label">Rain Position</label>
                            <input type="number" class="form-control" id="rainPosInput" min="0" max="180" value="90">
                        </div>
                    </div>
                    
                    <button class="btn btn-primary mt-3 w-100" onclick="updateSettings()">
                        <i class="fas fa-save me-1"></i>Save Settings
                    </button>
                </div>
            </div>
        </div>

        <!-- Activity Log -->
        <div class="row">
            <div class="col-12">
                <div class="control-panel">
                    <h5 class="mb-3">
                        <i class="fas fa-history me-2"></i>Recent Activity
                    </h5>
                    <div class="activity-log-wrapper" id="activityLogWrapper">
                        <div class="activity-log-container" id="activityLog">
                            <div class="text-center text-muted py-3">
                                <i class="fas fa-spinner fa-spin me-2"></i>Loading activity log...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        
        let systemData = null;
        let isOnline = false;

       
        document.addEventListener('DOMContentLoaded', function() {
            initializeControls();
            refreshData();
            setInterval(refreshData, 5000); 
        });

        function initializeControls() {
            
            //const slider = document.getElementById('servoSlider');
            //const sliderValue = document.getElementById('sliderValue');
            
           // slider.addEventListener('input', function() {
            //    sliderValue.textContent = this.value;
            //});
        }

        async function refreshData() {
            try {
                const response = await fetch('/api/RainSystem/status');
                const data = await response.json();
                
                systemData = data.deviceStatus;
                isOnline = data.isOnline;
                
                updateUI(data);
                updateConnectionStatus(true);
                
            } catch (error) {
                console.error('Error fetching data:', error);
                updateConnectionStatus(false);
            }
        }

        function updateUI(data) {
            const deviceStatus = data.deviceStatus;
            const recentLogs = data.recentLogs;
            
            if (deviceStatus) {
                
                updateDeviceCard(true);
                updateRainCard(deviceStatus.isRaining);
                updateServoPosition(deviceStatus.servoPosition);
                updateSensorReading(deviceStatus.analogValue);
                
                
                document.getElementById('thresholdInput').value = deviceStatus.rainThreshold;
                
                
                document.getElementById('toggleText').textContent = 
                    deviceStatus.systemEnabled ? 'Disable System' : 'Enable System';
            } else {
                updateDeviceCard(false);
            }
            
            
            updateActivityLog(recentLogs);

            if (deviceStatus && deviceStatus.proximityAlert) {
                showProximityAlert(deviceStatus.proximityDistance);
                
                fetch('/api/RainSystem/proximity/acknowledge', { method: 'POST' });
            }
            
        }

        function showProximityAlert(distance) {
            showAlert(`PROXIMITY ALERT: Object detected ${distance}cm from sensor!`, 'warning');
        }

        async function moveServo() {
            const position = document.getElementById('servoSlider').value;
            const button = event.target;
            
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Moving...';
            
            try {
                const response = await fetch('/api/RainSystem/servo/move', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ position: parseInt(position) })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Servo moved successfully!', 'success');
                    setTimeout(refreshData, 1000);
                } else {
                    showAlert('Failed to move servo', 'danger');
                }
            } catch (error) {
                showAlert('Error communicating with system', 'danger');
            } finally {
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-paper-plane me-1"></i>Move Servo';
            }
        }

        function updateConnectionStatus(online) {
            const indicator = document.getElementById('statusIndicator');
            const statusText = document.getElementById('statusText');
            
            if (online) {
                indicator.className = 'status-indicator status-online';
                statusText.textContent = 'Connected';
            } else {
                indicator.className = 'status-indicator status-offline';
                statusText.textContent = 'Disconnected';
            }
        }

        function updateDeviceCard(online) {
            const card = document.getElementById('deviceCard');
            const status = document.getElementById('deviceStatus');
            
            if (online) {
                card.className = 'card status-card device-online';
                status.innerHTML = '<i class="fas fa-check-circle me-1 text-success"></i><span>Online</span>';
            } else {
                card.className = 'card status-card device-offline';
                status.innerHTML = '<i class="fas fa-times-circle me-1 text-danger"></i><span>Offline</span>';
            }
        }

        function updateRainCard(isRaining) {
            const card = document.getElementById('rainCard');
            const status = document.getElementById('rainStatus');
            
            if (isRaining) {
                card.className = 'card status-card rain-detected';
                status.innerHTML = '<i class="fas fa-cloud-rain me-1 text-primary"></i><span>Rain Detected</span>';
            } else {
                card.className = 'card status-card system-dry';
                status.innerHTML = '<i class="fas fa-sun me-1 text-warning"></i><span>Dry</span>';
            }
        }

        function updateServoPosition(position) {
            document.getElementById('servoPosition').innerHTML = `<span>${position}°</span>`;
        }

        function updateSensorReading(analogValue) {
            document.getElementById('sensorReading').innerHTML = `<span>${analogValue}/1024</span>`;
        }

        function updateActivityLog(logs) {
            const logContainer = document.getElementById('activityLog');
            const logWrapper = document.getElementById('activityLogWrapper');
            
            if (!logs || logs.length === 0) {
                logContainer.innerHTML = '<div class="text-center text-muted py-3">No recent activity</div>';
                logWrapper.classList.remove('has-scroll');
                return;
            }
            
            const logHTML = logs.map(log => {
                const time = new Date(log.timestamp).toLocaleString('en-GB', {
                    timeZone: 'Europe/Sarajevo',
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: false
                });

                let className = 'log-item';
                let icon = 'fas fa-info-circle';
                
                switch (log.eventType) {
                    case 'rain_start':
                        className += ' log-rain-start';
                        icon = 'fas fa-cloud-rain';
                        break;
                    case 'rain_stop':
                        className += ' log-rain-stop';
                        icon = 'fas fa-sun';
                        break;
                    case 'manual_servo':
                        className += ' log-manual';
                        icon = 'fas fa-hand-paper';
                        break;
                }
                
                return `
                    <div class="${className}">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <i class="${icon} me-2"></i>
                                <strong>${log.eventType.replace('_', ' ').toUpperCase()}</strong>
                                <span class="text-muted ms-2">Analog: ${log.analogValue}, Servo: ${log.servoPosition}°</span>
                            </div>
                            <small class="text-muted">${time}</small>
                        </div>
                        ${log.notes ? `<div class="mt-1 text-muted small">${log.notes}</div>` : ''}
                    </div>
                `;
            }).join('');
            
            logContainer.innerHTML = logHTML;
            
            
            setTimeout(() => {
                const container = document.getElementById('activityLog');
                if (container.scrollHeight > container.clientHeight) {
                    logWrapper.classList.add('has-scroll');
                } else {
                    logWrapper.classList.remove('has-scroll');
                }
            }, 100);
        }



        async function toggleSystem() {
            const button = event.target;
            const originalText = button.innerHTML;
            
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';
            
            try {
                const response = await fetch('/api/RainSystem/system/toggle', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('System toggled successfully!', 'success');
                    setTimeout(refreshData, 1000);
                } else {
                    showAlert('Failed to toggle system', 'danger');
                }
            } catch (error) {
                showAlert('Error communicating with system', 'danger');
            } finally {
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }

        async function updateSettings() {
            const threshold = document.getElementById('thresholdInput').value;
            const normalPos = document.getElementById('normalPosInput').value;
            const rainPos = document.getElementById('rainPosInput').value;
            const button = event.target;
            
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Saving...';
            
            try {
                const response = await fetch('/api/RainSystem/settings/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        rainThreshold: parseInt(threshold),
                        normalPosition: parseInt(normalPos),
                        rainPosition: parseInt(rainPos)
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Settings updated successfully!', 'success');
                    setTimeout(refreshData, 1000);
                } else {
                    showAlert('Failed to update settings', 'danger');
                }
            } catch (error) {
                showAlert('Error communicating with system', 'danger');
            } finally {
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-save me-1"></i>Save Settings';
            }
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.top = '20px';
            alertDiv.style.right = '20px';
            alertDiv.style.zIndex = '9999';
            alertDiv.style.minWidth = window.innerWidth < 768 ? '90%' : '300px';
            alertDiv.style.left = window.innerWidth < 768 ? '5%' : 'auto';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }

        
        document.addEventListener('keydown', function(event) {
            if (window.innerWidth > 768 && event.ctrlKey) {
                switch(event.key) {
                    case 'r':
                        event.preventDefault();
                        refreshData();
                        break;
                    case 't':
                        event.preventDefault();
                        toggleSystem();
                        break;
                }
            }
        });
    </script>
</body>
</html>